; Do not edit or move this.
; Originally it was used to store a table for cleaning special "prot" segements
; Now, it's a table that includes every address that needs to be cleaned
; might want to just throw this in a separate file that gets included right before this one

; DOUBLE CHECK HOW THIS WILL INTERACT WITH THE FREE 7F8000 PATCH

 ; this file is generated by UAT prior to applying this patch
 ; it consists of a list of 'dl <address>'es for each freecode area used by resources, library routines,
 ; and any prot macros used by them
db "uber"
incsrc "../work/pointer_list.asm"
db "tool"
    
GlobalInit:
    sta $7F8182                    ; restore clobbered end of oam clear routine upload
    
    lda #$00
    sta !previous_mode+1           ; always 00, so that !previous_mode can be accessed in 16-bit mode
    dec
    sta !previous_mode
        
; we're restoring the original code, so this isn't needed anymore
; this overwrites the "JMP $806F" with "RTS"
;    if !sa1
;        lda #$60
;        sta $1E93                  ; edit SA-1 main loop to allow simple usage of it
;    endif
    
    jsr GlobalCode_init
; return from hijack (starts the spc engine upload)
    jml $008052|!bank

;----

; incsrc the global code file from a define generated by UAT
namespace GlobalCode
incsrc "!GlobalCodeFile"
namespace off










; no longer in use -- can now be done with * in gamemode instead
; the only difference is that * gamemode code would have a "CLI : INC $13" first
;GlobalMain:
;    if !sa1
;        JSR $1E8F
;    else
;        LDA $10
;        BEQ GlobalMain
;    endif
;    JSR global_main
;
;    JML $00806F|!bank

;-----------------------------------------------------------------

; this is the code copied to 1E80 by sa-1:
;base $1E80					; Base to WRAM address
;
;ram_sa1_call:					; SA-1 call
;	LDA #$80				; \ Send IRQ to SA-1
;	STA $2200				; / with message 00h
;						;
;-	LDA $3189				; \ Wait until SA-1 finishes processing.
;	BEQ -					; /
;						;
;	STZ $3189				; \ Clear finish flag from SA-1 and
;	RTS					; / return.
;.end:
;
;ram_main_loop:					; Main loop wait.
;	WAI					; Wait for an interrupt.
;.start:						;
;	LDA $10					; \ If game video update wasn't executed        1E8F
;	BEQ ram_main_loop			; / yet, wait for the next interrupt.
;						;
;	JMP $806F				; Return to the main loop.                      1E93
;.end:
;
;base off

; main sa-1 patch does this, which UAT overwrites
;ORG $806B					;  | run at 10.74 MHz while SNES is idle.
;	JMP ram_main_loop_start			;  |
;	NOP					;  |
